<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只不靠谱的猿想当厨子</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-05T05:18:13.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chef_wss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/04/05/hello-world/"/>
    <id>http://yoursite.com/2017/04/05/hello-world/</id>
    <published>2017-04-05T05:18:13.000Z</published>
    <updated>2017-04-05T05:18:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS与Unity-3D对接跳转传值</title>
    <link href="http://yoursite.com/2017/04/05/iOS%E4%B8%8EU3d%E5%AF%B9%E6%8E%A5%E8%B7%B3%E8%BD%AC%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2017/04/05/iOS与U3d对接跳转传值/</id>
    <published>2017-04-05T05:18:13.000Z</published>
    <updated>2017-04-05T09:55:53.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-4d90d9dcffe6d87c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-a15506e6ed3679e1.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面2"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-f1e1c044ebc4f2a6.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面3"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-b894ae461e49903d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面4"></p>
<hr>
<h5 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具:"></a>所需工具:</h5><ol>
<li>Unity3d 5.0版本</li>
<li>Xcode 6.2版本 模拟器的操作系统8.2v</li>
</ol>
<hr>
<h5 id="步骤1-创建一个unity项目"><a href="#步骤1-创建一个unity项目" class="headerlink" title="步骤1. 创建一个unity项目"></a>步骤1. 创建一个unity项目</h5><ul>
<li>创建一个Unity项目，并同时创建一个Cube,一个Text(作为cube的名字)和一个button按钮。如何创建这里就不在叙述，稍后附件中会有源代码。如下图：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-7daa3c844752ebf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建unity"></p>
<ul>
<li>在Unity的Project栏目的Assests中增加一个.mm文件,文件名自定义，我这里是TNAppController.mm，用xcode编写在拖到这里即可，内容为：</li>
</ul>
<p>#import <uikit uikit.h=""></uikit></p>
<p>#import “UnityAppController.h”</p>
<p>#import “UI/UnityView.h”</p>
<p>#import “UI/UnityViewControllerBase.h”</p>
<p>#import “HelloViewController.h”</p>
<p>@interface TNAppController : UnityAppController</p>
<p>@property (nonatomic, strong) UINavigationController *navController;</p>
<ul>
<li>(void)willStartWithViewController:(UIViewController*)controller;</li>
</ul>
<p>@end</p>
<p>@implementation TNAppController</p>
<ul>
<li>(void)willStartWithViewController:(UIViewController*)controller<br>{<br>_rootController = [[UIViewController alloc] init];<br>_rootView = [[UIView alloc] initWithFrame:[[UIScreen mainScreen] bounds]];<br>_rootController.view = _rootView;</li>
</ul>
<p>HelloViewController *helloVC = [[HelloViewController alloc] initWithNibName:nil bundle:nil];<br>self.navController = [[UINavigationController alloc] initWithRootViewController:helloVC];<br>[_rootView addSubview:self.navController.view];<br>}</p>
<p>@end</p>
<p>IMPL_APP_CONTROLLER_SUBCLASS(TNAppController)</p>
<p>说明：<br>a. 导入的部分都为Untiy生成xcode项目中自带的.h文件，以后再导入也可以，HelloViewController.h文件为我们以后要创建的文件。<br>b. 这个文件继承UnityAppController.h这个文件，这点很重要，UnityAppController中提供了很多我们可以直接调用的属性，以便我们自己写的iOS文件可以使用window，rootController等属性，这些属性要和Untiy导出的iOS项目使用的是同一个。<br>c. willStartWithViewController这个方法好像是只有Unity 5左右的版本才用的是这个方法，4.x以前的版本使用的不是这个方法。这个方法是将要打开视图控制器的初始化方法。初始化根视图控制器和根视图。<br>d. IMPL_APP_CONTROLLER_SUBCLASS 这个很重要，它决定了我们的TNAppController.h 这个文件将被重载。UnityAppController.h 文件中有解释，如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-8d54190e1cd602a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="unityAppController.h"></p>
<ul>
<li>在Assets文件夹中，创建一个C# javascript文件，代码如下：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-538d8ff6903f916c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="C# javascript脚本文件"></p>
<p>说明：<br>a. [DllImport (“__Internal”)] 引入一个dll的内部文件.<br>b. 声明一个可调用的接口， private static extern int ActivateUI_iOS(int index);该方法可以有任意多个参数，这个参数的使用，到时候我们在iOS模拟器上可以看到,并且可以接收到iOS的返回值。<br>c. Start方法初始化Button，将button.cs文件与Hierarchy中的创建的Button组件进行关联。</p>
<ul>
<li>在Assets文件夹中，创建一个test.js文件，代码如下图：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-e6b021fa49e2e438.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test.js脚本文件"></p>
<p>说明:<br>a. SetText(Input)方法，我们将在ios项目中调用这个方法，动态修改cube的名字。returnVal()方法是没有用的。<br>b. 我们将test.js文件和Hierarchy中的cube组件关联，在将text组件和cube关联，text组件作为cube组件的名称。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-6ef4cf3349e67fbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cube组件"></p>
<ul>
<li>我们开始生成IOS项目，unity-&gt;file-&gt;build &amp; settings,选中iOS，点击player settings,这里就不详细叙述了</li>
</ul>
<hr>
<hr>
<h5 id="步骤2-配置iOS项目"><a href="#步骤2-配置iOS项目" class="headerlink" title="步骤2. 配置iOS项目"></a>步骤2. 配置iOS项目</h5><ul>
<li>生成iOS项目目录如下:</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1753861-e9065c2ff95d7a51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成的iOS目录"></p>
<p>我们在untiy中创建的TNAppController.mm文件会出现在Libraries包中，创建的test.js，和button.cs文件会编译成dll.s文件中去<br>我们在classes文件夹中创建如下文件， MyViewInit.h和MyViewInit.mm文件，mm结尾的，是c++识别的文件，其中有c++代码</p>
<ul>
<li>MyViewInit.h:</li>
</ul>
<p>//<br>//  MyViewInit.h<br>//  Unity-iPhone<br>//<br>//  Created by wencun on 4/3/15.<br>//<br>//</p>
<p>#import <foundation foundation.h=""></foundation></p>
<p>@interface MyViewInit : NSObject</p>
<ul>
<li>(void) enabled;</li>
<li>(void) disabled;</li>
<li>(void) setEnabled:(NSString *)foo;</li>
<li>(int) value;<br>@end</li>
</ul>
<p>#pragma mark cplusplus code</p>
<p>#ifdef __cplusplus<br>extern “C” {</p>
<p>#endif</p>
<p>int ActivateUI_iOS(int index);</p>
<p>#ifdef __cplusplus<br>} // extern “C”</p>
<p>#endif</p>
<ul>
<li>MyViewInit.mm:</li>
</ul>
<p>//<br>//  MyViewInit.m<br>//  Unity-iPhone<br>//<br>//  Created by wencun on 4/3/15.<br>//<br>//</p>
<p>#import “MyViewInit.h”</p>
<p>#import “UnityInterface.h”</p>
<p>@implementation MyViewInit</p>
<ul>
<li><p>(void) enabled{<br>UnitySendMessage(“Cube”, “Enabled”, “”);<br>}</p>
</li>
<li><p>(void) disabled{<br>UnitySendMessage(“Cube”, “Disabled”, “”);<br>}</p>
</li>
<li><p>(void) setEnabled:(NSString *)foo{<br>UnitySendMessage(“Cube”, “SetText”, [foo UTF8String]);<br>}</p>
</li>
<li><p>(int) value{<br>//    return UnitySendMessage(“Cube”, “returnVal”, “”);<br>return 11;<br>}</p>
</li>
</ul>
<p>@end</p>
<p>#pragma mark cplusplus code<br>extern “C”{<br>int ActivateUI_iOS(int index){<br>UIAlertView <em>alert = [[UIAlertView alloc] initWithTitle:@”Unity调用了IOS方法” message:[NSString stringWithFormat:@”我是第%i次从Unity过来的！”,index] delegate:nil cancelButtonTitle:@”取消” otherButtonTitles:nil, nil];<br>[alert show];<br>//        NSString </em>s = [NSString stringWithCharacters:index length:99];<br>//        NSNumber *num = [NSNumber numberWithChar:index];<br>return ++index;<br>}<br>}</p>
<p>其中，UnitySendMessage为iOS调用Unity中的方法，第一个参数为组件名称，第二个参数为方法名，第三个参数为方法的参数，该方法的返回值为void，所有不能接受调用Unity方法中的返回值<br>pragma下方的代码为c++代码，为ActivateUI_iOS的实现，这样，点击Unity中的按钮就可以调用这个方法了，该方法有一个返回值，Unity中可以接收到</p>
<ul>
<li>创建HelloViewController.h文件，继承UIViewController</li>
</ul>
<p>//<br>//  HelloViewController.m<br>//  Unity-iPhone<br>//<br>//  Created by wencun on 4/3/15.<br>//<br>//</p>
<p>#import “HelloViewController.h”</p>
<p>#import “CoolUnitySceneviewController.h”</p>
<p>@interface HelloViewController ()</p>
<p>@end</p>
<p>@implementation HelloViewController</p>
<ul>
<li>(void)viewDidLoad {<br>[super viewDidLoad];<br>// Do any additional setup after loading the view.<br>self.view.backgroundColor = [UIColor whiteColor];</li>
</ul>
<p>UIButton *btnNext = [UIButton buttonWithType:UIButtonTypeSystem];<br>[btnNext setTitle:@”这是一个IOS界面，点我进入Unity界面。” forState:UIControlStateNormal];<br>btnNext.frame = CGRectMake(40, 200, 300, 44);<br>btnNext.layer.borderWidth = 1;<br>//    btnNext.layer.borderColor = [UIColor grayColor];<br>btnNext.layer.cornerRadius = 3;<br>btnNext.backgroundColor = [UIColor greenColor];<br>//    btnNext.center = CGPointMake(self.view.bounds.size.height / 2, 200);<br>[self.view addSubview:btnNext];<br>self.view.backgroundColor = [UIColor grayColor];</p>
<p>[btnNext addTarget:self action:@selector(gotoUnityScene:) forControlEvents:UIControlEventTouchUpInside];<br>}</p>
<p>#pragma mark - Private methods</p>
<ul>
<li>(void)gotoUnityScene:(id)sender {<br>NSLog(@”[HelloVC] Go to unity scene”);</li>
</ul>
<p>CoolUnitySceneViewController *coolUnityVC = [[CoolUnitySceneViewController alloc] initWithNibName:nil bundle:nil];<br>[self.navigationController pushViewController:coolUnityVC animated:YES];<br>}</p>
<ul>
<li>(void)didReceiveMemoryWarning {<br>[super didReceiveMemoryWarning];<br>// Dispose of any resources that can be recreated.<br>}</li>
</ul>
<p>@end</p>
<ul>
<li>创建CoolUnitySceneViewController.h文件，继承UIViewController，如下图：</li>
</ul>
<p>//<br>//  CoolUnitySceneviewController.m<br>//  Unity-iPhone<br>//<br>//  Created by wencun on 4/3/15.<br>//<br>//</p>
<p>#import “CoolUnitySceneViewController.h”</p>
<p>#import “GoodByeViewController.h”</p>
<p>#include “UI/UnityViewControllerBase.h”</p>
<p>#include “UnityAppController+ViewHandling.h”</p>
<p>#import “MyViewInit.h”</p>
<p>@interface CoolUnitySceneViewController ()</p>
<p>@end</p>
<p>@implementation CoolUnitySceneViewController</p>
<ul>
<li>(void)viewDidLoad {<br>[super viewDidLoad];<br>// Do any additional setup after loading the view.<br>[self.view addSubview:GetAppController().unityView];</li>
</ul>
<p>GetAppController().unityView.frame = self.view.frame;</p>
<p>UILabel *text = [[UILabel alloc] initWithFrame:CGRectMake(40, 50, 300, 40)];<br>text.text = @”欢迎进入Unity界面！(IOS)”;<br>text.textAlignment = NSTextAlignmentCenter;<br>text.backgroundColor = [UIColor greenColor];<br>[self.view addSubview:text];</p>
<p>UITextField *tv = [[UITextField alloc] initWithFrame:CGRectMake(40, 100, 300, 40)];<br>tv.textAlignment = NSTextAlignmentCenter;<br>tv.layer.borderWidth = 1;<br>tv.layer.cornerRadius = 3;<br>[tv setPlaceholder:@”请键入文字…”];<br>tv.tag = 101;<br>[self.view addSubview:tv];</p>
<p>UIButton *btnNext = [UIButton buttonWithType:UIButtonTypeSystem];<br>[btnNext setTitle:@”点我可以修改CUBE中的文字(IOS)” forState:UIControlStateNormal];<br>btnNext.frame = CGRectMake(40, 150, 300, 44);<br>btnNext.backgroundColor = [UIColor whiteColor];<br>btnNext.layer.borderWidth = 1;<br>btnNext.layer.cornerRadius = 3;<br>[self.view addSubview:btnNext];</p>
<p>[btnNext addTarget:self action:@selector(goToLastScene:) forControlEvents:UIControlEventTouchUpInside];</p>
<p>UIButton *recevied = [UIButton buttonWithType:UIButtonTypeSystem];<br>[recevied setTitle:@”点我可以进入到另外一个IOS界面哦！(IOS)” forState:UIControlStateNormal];<br>recevied.frame = CGRectMake(40, 450, 300, 44);<br>recevied.backgroundColor = [UIColor whiteColor];<br>recevied.layer.borderWidth = 1;<br>recevied.layer.cornerRadius = 3;<br>//    btnNext.center = CGPointMake(self.view.bounds.size.height / 2, self.view.bounds.size.width / 2);<br>[self.view addSubview:recevied];</p>
<p>[recevied addTarget:self action:@selector(recevied:) forControlEvents:UIControlEventTouchUpInside];<br>}</p>
<p>#pragma mark - Private methods</p>
<ul>
<li><p>(void)goToLastScene:(id)sender {<br>//    NSLog(@”[CoolUnitySceneVC] Go to the last scene”);<br>NSString <em>text = ((UITextField </em>)[self.view viewWithTag:101]).text;<br>if ([text isEqualToString:@””]) {<br>text = @”还没有给我一个名字哦！”;<br>}<br>[MyViewInit setEnabled:text];<br>}</p>
</li>
<li><p>(void)show:(id)sender{<br>[MyViewInit setEnabled:@”show”];<br>}</p>
</li>
<li><p>(void)recevied:(id)sender{<br>GoodByeViewController *goodByeVC = [[GoodByeViewController alloc] initWithNibName:nil bundle:nil];<br>[self.navigationController pushViewController:goodByeVC animated:YES];<br>}</p>
</li>
</ul>
<ul>
<li>(void)didReceiveMemoryWarning {<br>[super didReceiveMemoryWarning];<br>// Dispose of any resources that can be recreated.<br>}</li>
</ul>
<p>@end</p>
<p>GetAppController().unityView,获取Unity中的视图，把这个视图添加到CoolUnitySceneViewController.h视图上，并设置该视图的框架</p>
<ul>
<li>创建GoodByeViewController.h文件，代码如下图：</li>
</ul>
<p>//<br>//  GoodByeViewController.m<br>//  Unity-iPhone<br>//<br>//  Created by wencun on 4/3/15.<br>//<br>//</p>
<p>#import “GoodByeViewController.h”</p>
<p>#import “CoolUnitySceneviewController.h”</p>
<p>@interface GoodByeViewController ()</p>
<p>@end</p>
<p>@implementation GoodByeViewController</p>
<ul>
<li>(void)viewDidLoad {<br>[super viewDidLoad];<br>// Do any additional setup after loading the view.<br>self.view.backgroundColor = [UIColor grayColor];</li>
</ul>
<p>UILabel *lblTheEnd = [[UILabel alloc] initWithFrame:CGRectMake(50, 200, 300, 44)];<br>lblTheEnd.text = @”我是第二个IOS界面，欢迎回来！”;</p>
<p>//    lblTheEnd.center = CGPointMake(self.view.bounds.size.height / 2, self.view.bounds.size.width / 2);</p>
<p>[self.view addSubview:lblTheEnd];<br>}</p>
<ul>
<li>(void)didReceiveMemoryWarning {<br>[super didReceiveMemoryWarning];<br>}</li>
</ul>
<p>@end</p>
<p>做一个UILabel,显示是IOS界面</p>
<p>#####iOS调用Unity方法的限制：</p>
<ol>
<li>iOS无法接受到Unity方法中的返回值，因为UnitySendMessage是void的类型</li>
<li>iOS调用Unity方法只能传一个参数，若有多个参数，要拼接成字符串</li>
</ol>
<p>#####Unity调用iOS方法：</p>
<ol>
<li>调用方法的参数可以有任意个</li>
<li>可以接受到iOS的返回值<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2></li>
</ol>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"我的新Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo服务</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1753861-4d90d9dcffe6d87c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1
    
    </summary>
    
    
  </entry>
  
</feed>
